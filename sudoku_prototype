using System.Diagnostics.Metrics;
using System.Globalization;

namespace room
{
    class sudoku
    {
        const int n = 3;       

        private int[,] Room(int[,] map)
        {
            for (int i = 0; i < n * n; i++)
            {
                for (int j = 0; j < n * n; j++)
                {
                    map[i, j] = ((i * n + i / n + j) % (n * n) + 1);
                }
            }
            return (map);
        }

        private int[,] Transposition(int[,] map)
        {
            int[,] Tmap = new int[n * n, n * n];

            for (int i = 0; i < n * n; i++)
            {
                for (int j = 0; j < n * n; j++)
                {
                    Tmap[i, j] = map[j, i];
                }
            }
            map = Tmap;
            return (map);
        }

        private int[,] Line(int[,] map, Random rnd)
        {
            int Block = rnd.Next(0, n - 1);
            int LineOne = rnd.Next(0, n);
            int LineTwo = rnd.Next(0, n);
            int Lo = Block * n + LineOne;
            int Lt = Block * n + LineTwo;
            for (int j = 0; j < n * n; j++)
                (map[Lo, j], map[Lt, j]) = (map[Lt, j], map[Lo, j]);
            return (map);
        }

        private int[,] Column(int[,] map, Random rnd)
        {
            int Block = rnd.Next(0, n - 1);
            int ColumnOne = rnd.Next(0, n);
            int ColumnTwo = rnd.Next(0, n);
            int Co = Block * n + ColumnOne;
            int Ct = Block * n + ColumnTwo;
            for (int i = 0; i < n * n; i++)
                (map[i, Co], map[i, Ct]) = (map[i, Co], map[i, Ct]);

            return (map);
        }

        private void Hide(int level, int[,] map, Random rnd )
        {
            int chance = 0;

            if (level == 1)
            {
                level = 40;
            }
            if (level == 2)
            {
                level = 54;
            }
            if (level == 3)
            {
                level = 61;
            }

            while (level != 0)
            {
                int i = 0;
                int j = 0;

                for (i = 0; i < n * n; i++)
                {
                    for (j = 0; j < n * n; j++)
                    {
                        chance = rnd.Next(0, 3);
                        if (chance == 0 && map[i, j] != 0 && level > 0)
                        {
                            map[i, j] = 0;
                            level--;
                        }
                    }
                }

                if (level == 0)
                {
                    break;
                }
                if (level >= 0)
                {
                    i = 0;
                    j = 0;
                }
            }
        }

        private int LevelChoosing()
        {
            Console.WriteLine("Введите число от 1 до 3 где\n1-легкий уровень\n2-средний уровень\n3-сложный уровень");
            int level = Convert.ToInt32(Console.ReadLine());

            return (level);
        }

        private void CreateRoom()
        {
            int[,] map = new int[n * n, n * n];
            Random rnd = new Random();
            Room(map);
            
            int create = rnd.Next(n * n, n * n * n * n);
            for (int i = 0; i < create; i++)
            {
                map = Transposition(map);
                map = Line(map, rnd);
                map = Column(map, rnd);
            }

            int level = LevelChoosing();
            Hide(level, map, rnd);
            Print(map);
        }

        private void Print(int[,] map)
        {
            int counter = 0;
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i, j] != 0)
                    {
                        Console.Write(map[i, j] + "\t");
                    }
                    else
                    {
                        Console.Write("| |" + "\t");
                        counter++;
                    }
                }
                Console.WriteLine();
            }
        }

        static void Main()
        {
            sudoku map = new sudoku();
            map.CreateRoom();
        }
    }
}
